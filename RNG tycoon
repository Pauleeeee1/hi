local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")

local timetooktocollect = 0

	


local safetynet = Instance.new("Part")
safetynet.Name = "SafetyNet"
safetynet.Anchored = true
safetynet.Parent = Workspace
safetynet.Position = Vector3.new(-2300, 110, 1750)
safetynet.Size = Vector3.new(1000, 1, 1000)


wait(0.1)

local CubesToCollect = {
	["Luck Cube"] = true,
	["Haste Cube"] = true,
	["Speed Cube"] = true,
	["Fortune Cube"] = true,
	["Inferno Cube"] = true,
	["Wealth Cube"] = true,
	["Pastel Cube"] = true,
	["Golden Cube"] = true,
	["Glitch Cube"] = true,
	["Spore Blossom"] = true
}

local CubesCollected = {
	["Luck Cube"] = 0,
	["Haste Cube"] = 0,
	["Speed Cube"] = 0,
	["Fortune Cube"] = 0,
	["Inferno Cube"] = 0,
	["Wealth Cube"] = 0,
	["Pastel Cube"] = 0,
	["Golden Cube"] = 0,
	["Glitch Cube"] = 0,
	["Spore Blossom"] = 0
}

-- Custom debug print function
local function debugPrint(...)
	if _G.DebugPrint then
		print("[DEBUG]", ...)
	end
end

-- Function to convert a table to a readable string format, filtering out entries with a value of 0
local function tableToString(tbl)
	local result = "{"
	for k, v in pairs(tbl) do
		if v ~= 0 then
			result = result .. k .. ": " .. v .. ", "
		end
	end
	return result:sub(1, -3) .. "}"
end

-- Function to teleport a part to the player's position
local function teleportToPlayer(part, player)
	debugPrint("Teleporting", part.Name, "to player", player.Name)
	part.Position = player.Character.HumanoidRootPart.Position
end

-- Get the first player in the game (assuming there is at least one player)
local player = Players:GetPlayers()[1]
if not player then
	debugPrint("No players found in the game")
	return
end

debugPrint("Found player:", player.Name)

-- List of things that should not be deleted
local dontdeletethis = {
	player.Name,
	"Camera",
	"plots"
}

-- List of things to delete
local delete = {
	"PathParts", "Part", "Model", "Easter Eggs", "Folder", "Leaderboards",
	"TestingObjects", "WEATHERMACHINE", "SPACETESTMODEL", "Wind", "Snow", "Snow2",
	"Rain", "LEAF", "snow", "Beam", "Rorvik Outskirts", "New", "Perfect Lawn Old",
	"TEST0", "Rock1", "Rock 4", "Sphere", "Process", "fireflies", "Baseplate",
	"MeshPart", "NEW", "RollEf", "Dummy", "Conveyors for building", "SelectionBox",
	"SpawnLocation"
}

wait(3) -- Wait for elements to load

-- Function to check if there are no cubes left
local function noCubesLeft()
	for name, _ in pairs(CubesToCollect) do
		if Workspace:FindFirstChild(name) then
			return false
		end
	end
	return true
end

-- Main loop to check each child in Workspace
for _, child in pairs(Workspace:GetChildren()) do
	debugPrint("Checking child:", child.Name)

	if CubesToCollect[child.Name] then
		debugPrint("Found target cube:", child.Name)
		local Hitbox = child:FindFirstChild("Hitbox")
		if Hitbox then
			debugPrint("Found Hitbox in:", child.Name)
			CubesCollected[child.Name] = CubesCollected[child.Name] + 1
			teleportToPlayer(Hitbox, player)
		else
			debugPrint("No Hitbox found in:", child.Name)
		end
	elseif Players:FindFirstChild(child.Name) then
		local isImportant = false
		for _, importantName in ipairs(dontdeletethis) do
			if child.Name == importantName then
				isImportant = true
				break
			end
		end

		if not isImportant then
			debugPrint("Destroying non-target child:", child.Name)
			child:Destroy()
		end
	elseif table.find(delete, child.Name) then
		debugPrint("Deleting:", child.Name)
		child:Destroy()
	end
end
wait(0.5)

-- Collect all cubes again if there are still cubes left
if not noCubesLeft() then
	debugPrint("Cubes still left, collecting all cubes again.")
	-- Implement your logic to collect all cubes again
end

-- Function to check if all values in a table are zero
local function allValuesZero(tbl)
	for _, v in pairs(tbl) do
		if v ~= 0 then
			return false
		end
	end
	return true
end



local function SendMessageEMBED(url, embed)
	local http = game:GetService("HttpService")
	local headers = {
		["Content-Type"] = "application/json"
	}
	local data = {
		["embeds"] = {
			{
				["title"] = embed.title,
				["description"] = embed.description,
				["color"] = embed.color,
				["fields"] = embed.fields,
				["footer"] = {
					["text"] = embed.footer.text
				}
			}
		}
	}
	local body = http:JSONEncode(data)
	local response = request({
		Url = url,
		Method = "POST",
		Headers = headers,
		Body = body
	})
	print("Sent")
end

-- Example
local url = _G.Webhook
local embed = {
	["title"] = "Stats",
	["description"] = "These are your current stats",
	["color"] = 65280,
	["fields"] = {
		{
			["name"] = "Cubes Collected:",
			["value"] = tableToString(CubesCollected)
		},
		{
			["name"] = "User:",
			["value"] = player.Name
		},
		{
			["name"] = "Time Took:",
			["value"] = timetooktocollect.." (tooo lazy to add)"
		}
	},
	["footer"] = {
		["text"] = "made by Paule😍"
	}
}

-- Only send the webhook if not all values in CubesCollected are zero
if not allValuesZero(CubesCollected) then
	SendMessageEMBED(url, embed)
end


wait(0.5)

-- Function to attempt server hop
local function attemptServerHop()
	debugPrint("Attempting server hop...")

	local placeId = game.PlaceId
	local serversApi = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
	local nextPageCursor = nil

	local function listServers(cursor)
		local url = serversApi
		if cursor then
			url = url .. "&cursor=" .. cursor
		end

		local response = HttpService:JSONDecode(game:HttpGet(url))
		return response
	end

	local serverToTeleport
	repeat
		local serverList = listServers(nextPageCursor)
		if serverList and serverList.data and #serverList.data > 0 then
			serverToTeleport = serverList.data[1]
			nextPageCursor = serverList.nextPageCursor
		end
	until serverToTeleport or not nextPageCursor

	if serverToTeleport then
		TeleportService:TeleportToPlaceInstance(placeId, serverToTeleport.id, player)
		serverhopped = true
		debugPrint("Successfully hopped to server")
	else
		debugPrint("Failed to find a suitable server to teleport.")
	end
end

local serverhopped = false
local maxAttempts = 5  -- Maximal three attempts for server hop

-- Attempt server hop up to maxAttempts times
for attempt = 1, maxAttempts do
	attemptServerHop()
	if serverhopped then
		break
	end
	wait(2)  -- Wait 2 seconds before attempting again
end

-- If no server hop was successful, perform an alternative action
if not serverhopped then
	debugPrint("No suitable server found or no cubes left after multiple attempts, performing alternative action...")
	-- Insert your alternative action here if needed
end

debugPrint("Script finished")



