_G.Main = "farmpaule112"

-- Services and Modules
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Library = ReplicatedStorage.Library.Client
local SaveModule = require(Library.Save)
local TradingCmds = require(Library.TradingCmds)

-- Get inventory data
local pets = SaveModule.Get().Inventory.Pet

-- Trading Commands
local SendMessage = TradingCmds.Message
local SendTrade = TradingCmds.Request
local SetReady = TradingCmds.SetReady
local SetConfirm = TradingCmds.SetConfirmed
local SetDecline = TradingCmds.Decline
local SetItem = TradingCmds.SetItem

-- Host tracking
local hostPlayer

-- Add Huge pets logic
local function addhuges()
	for id, petData in pairs(pets) do
		if string.find(petData["id"], "Huge") then
			local petId = id
			print("Pet ID: " .. tostring(petId))
			print("Pet type: " .. tostring(petData["pt"]))
			print("Amount: " .. tostring(petData._am))
			SetItem("Pet", petId, 1)
		end
	end
end

-- Define commands for easy extension
local Commands = {
	["!trade"] = function() SendTrade(hostPlayer) end,
	["!say"] = function(msg)
		local messageToSay = string.gsub(msg, "!say", "") -- Remove !say from the message
		SendMessage(messageToSay)
	end,
	["!ready"] = function() SetReady(true) end,
	["!confirm"] = function() SetConfirm(true) end,
	["!decline"] = function() SetDecline() end,
	["!addhuges"] = function() addhuges() end,
}

-- Handle chat messages
local function handleChatMessage(plr, msg)
	warn(plr.Name .. " said: " .. msg)

	-- Only execute commands if the player is the host
	if plr == hostPlayer then
		warn("Host player sent a message")

		-- Check if the message matches any command
		for command, action in pairs(Commands) do
			if string.sub(string.lower(msg), 1, string.len(command)) == string.lower(command) then
				warn("Executing command: " .. command)
				action(msg) -- Pass the message to the command's function
				return -- Exit after finding and executing the command
			end
		end
	else
		warn("Player is not the host, ignoring message.")
	end
end

-- Function to handle the host leaving the server
local function handleHostLeft()
	warn("Host player left the game, waiting for them to rejoin...")

	-- Wait for the host to join again
	Players.PlayerAdded:Connect(function(plr)
		if plr.Name == _G.Main then
			hostPlayer = plr
			warn("Host player rejoined: " .. plr.Name)
			plr.Chatted:Connect(function(msg)
				handleChatMessage(plr, msg)
			end)
			-- Monitor if the host leaves the game
			plr.AncestryChanged:Connect(function(_, parent)
				if not parent then
					hostPlayer = nil
					handleHostLeft() -- Restart waiting if the host leaves
				end
			end)
		end
	end)
end

-- Initial check for the host player in the game
local function checkForHostPlayer()
	hostPlayer = Players:FindFirstChild(_G.Main)
	if hostPlayer then
		warn("Host player is already in the game: " .. hostPlayer.Name)
		hostPlayer.Chatted:Connect(function(msg)
			handleChatMessage(hostPlayer, msg)
		end)
		-- Monitor if the host leaves the game
		hostPlayer.AncestryChanged:Connect(function(_, parent)
			if not parent then
				hostPlayer = nil
				handleHostLeft() -- Wait for the host if they leave
			end
		end)
	else
		warn("Host player not found, waiting for them to join...")
		handleHostLeft() -- Start waiting if the host is not in the server
	end
end

-- Start by checking for the host player in the server
checkForHostPlayer()
