local function ROX()
	wait(1)
	repeat wait() until game:IsLoaded()

	local Workspace = game:GetService("Workspace")
	local Players = game:GetService("Players")
	local HttpService = game:GetService("HttpService")
	local TeleportService = game:GetService("TeleportService")

	local player = Players.LocalPlayer
	local maxAttempts = 5
	local waitTime = 2

	repeat wait() until game:IsLoaded()

	_G.DebugPrint = false

	local function debugPrint(...)
		if _G.DebugPrint then
			print("[DEBUG]", ...)
		end
	end

	local function GetHumanoid()
		local Player = Players.LocalPlayer
		local Character = Player.Character or Player.CharacterAdded:Wait()
		local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
		local Humanoid = Character:WaitForChild("Humanoid")

		if Humanoid and HumanoidRootPart and Humanoid.Health > 1 then
			warn("Found Humanoid")
			return Humanoid, HumanoidRootPart
		else
			warn("Humanoid or HumanoidRootPart not found")
			return nil, nil
		end
	end

	local function collectchest()
		for _, descendant in ipairs(workspace:GetDescendants()) do
			if descendant:IsA("ProximityPrompt") then
				fireproximityprompt(descendant)
			end
		end
	end

	local function getObject()
		local objects = {
			workspace:WaitForChild("Camera"), workspace:WaitForChild("Terrain"), workspace:WaitForChild("BoostPads"), workspace:WaitForChild("Components"),
			workspace:WaitForChild("Gifts"), workspace:WaitForChild("InteriorDoors"), workspace:WaitForChild("Lobby"), workspace:WaitForChild("Music"), workspace:WaitForChild("Npcs"),
			workspace:WaitForChild("Pets_TowerPetSpawner"), workspace:WaitForChild("Pillars"), workspace:WaitForChild("Sounds"), workspace:WaitForChild("TowerSummoningPads"),
			workspace:WaitForChild("WorldTeleports"), workspace:WaitForChild("Main"), workspace:WaitForChild("Grass"), workspace:WaitForChild("Collision"),
			workspace:WaitForChild("InteractStore"), workspace:WaitForChild("Part"), workspace:WaitForChild("TouchStore"),
		}
		return objects
	end

	local function allObjectsLoaded(objects)
		for i, obj in ipairs(objects) do
			if not obj then
				print("Object " .. i .. " is not loaded yet.")
				return false
			else
				print("Object " .. i .. " is loaded: " .. tostring(obj))
			end
		end
		return true
	end

	local objects = getObject()
	repeat
		wait(0.1)
		print("Waiting for all objects to load...")
		for i, obj in ipairs(objects) do
			print("Object " .. i .. ": " .. tostring(obj))
		end
	until allObjectsLoaded(objects)

	print("All objects are loaded!")
	wait(3)

	local Humanoid = GetHumanoid()
	if Humanoid then
		Humanoid.Health = 0
	end
	wait(1)

	Humanoid = GetHumanoid()
	if Humanoid then
		print("Humanoid gefunden!")
	else
		repeat
			wait(0.1)
			Humanoid = GetHumanoid()
		until Humanoid
		print("Humanoid gefunden nach dem Warten!")
	end

	collectchest()
	wait(3)

	local function attemptServerHop()
		debugPrint("Attempting server hop...")

		local placeId = game.PlaceId
		local serversApi = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100"
		local nextPageCursor = nil
		local currentJobId = game.JobId

		local function listServers(cursor)
			local url = serversApi
			if cursor then
				url = url .. "&cursor=" .. cursor
			end

			local response = HttpService:JSONDecode(game:HttpGet(url))
			return response
		end

		local availableServers = {}

		repeat
			local serverList = listServers(nextPageCursor)
			if serverList and serverList.data then
				for _, server in ipairs(serverList.data) do
					if server.playing < server.maxPlayers and server.id ~= currentJobId then
						table.insert(availableServers, server)
					end
				end
				nextPageCursor = serverList.nextPageCursor
			end
		until not nextPageCursor

		if #availableServers > 0 then
			local randomServer = availableServers[math.random(#availableServers)]
			local success, errorMessage = pcall(function()
				TeleportService:TeleportToPlaceInstance(placeId, randomServer.id, player)
			end)
			if success then
				debugPrint("Successfully hopped to server")
				return true
			else
				debugPrint("Teleport failed: " .. errorMessage)
				return false
			end
		else
			debugPrint("No suitable server found to teleport.")
			return false
		end
	end

	local serverHopped = false
	for attempt = 1, maxAttempts do
		serverHopped = attemptServerHop()
		if serverHopped then
			break
		end
		wait(waitTime)
		debugPrint("Retrying server hop... Attempt: " .. attempt)
	end

	if not serverHopped then
		debugPrint("No suitable server found or no cubes left after multiple attempts, performing alternative action...")
		-- Insert your alternative action here if needed
	end
end

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local AllowedUserNames = {
	"pauledropper1",
	"Roxfarm2",
	"Roxfarm3",
	"Roxfarm4"
}

local function isAllowedUser()
	for _, username in ipairs(AllowedUserNames) do
		if LocalPlayer.Name == username then
			return true
		end
	end
	return false
end


print("Access granted.")
ROX()
